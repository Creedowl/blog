<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记 on Creedowl</title>
    <link>https://blog.creedowl.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 学习笔记 on Creedowl</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 03 Mar 2021 15:10:56 +0800</lastBuildDate><atom:link href="https://blog.creedowl.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ocaml Heap</title>
      <link>https://blog.creedowl.com/posts/ocaml-heap/</link>
      <pubDate>Wed, 03 Mar 2021 15:10:56 +0800</pubDate>
      
      <guid>https://blog.creedowl.com/posts/ocaml-heap/</guid>
      <description>简介 本次课设我实现的数据结构是堆（heap)，堆是一种非常重要的数据结构，分为大顶堆和小顶堆，可以快速地获取其中优先级最高的元素。若是满足以</description>
    </item>
    
    <item>
      <title>GPG使用笔记</title>
      <link>https://blog.creedowl.com/posts/gpg/</link>
      <pubDate>Thu, 02 Apr 2020 14:47:31 +0800</pubDate>
      
      <guid>https://blog.creedowl.com/posts/gpg/</guid>
      <description>Why GPG? GPG 是一个密码学软件，用于加密、签名通信内容及管理非对称密码学的密钥，具体历史、介绍可以在wiki中看到，官网 而我使用 GPG 的缘由是，在 Github 上提</description>
    </item>
    
    <item>
      <title>Vue.js 从入坑到入土</title>
      <link>https://blog.creedowl.com/posts/vue-demo-instruction/</link>
      <pubDate>Tue, 23 Apr 2019 21:25:25 +0800</pubDate>
      
      <guid>https://blog.creedowl.com/posts/vue-demo-instruction/</guid>
      <description>Vue.js 从入坑到入土 近年来前端领域发展飞速，从最早的直接写html, js, css 到使用jQuery快速开发，再到近年来使用Vuejs，Reactjs 实现工</description>
    </item>
    
    <item>
      <title>decorator 装饰器</title>
      <link>https://blog.creedowl.com/posts/python-decorator/</link>
      <pubDate>Sat, 03 Nov 2018 16:24:59 +0800</pubDate>
      
      <guid>https://blog.creedowl.com/posts/python-decorator/</guid>
      <description>decorator 装饰器 普通装饰器 有个计算a+b的函数 def add(a, b): return a+b 现在想要在函数执行前后进行操作，可以用装饰器 from functools import wraps def log(func): @wraps(func) # 避免原函数的__name__等属</description>
    </item>
    
  </channel>
</rss>
